import{_ as n,c as l,aA as p,G as a,B as i,o}from"./chunks/framework.CyHSuKli.js";const h="/assets/Explore_InstalledToolDir_0.2.1.4wWBxdQr.png",F=JSON.parse('{"title":"工具结构","description":"","frontmatter":{},"headers":[],"relativePath":"devtool/structure.md","filePath":"devtool/structure.md","lastUpdated":1737970945000}'),d={name:"devtool/structure.md"};function k(r,s,c,u,g,E){const t=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return o(),l("div",null,[s[0]||(s[0]=p('<h1 id="工具结构" tabindex="-1">工具结构 <a class="header-anchor" href="#工具结构" aria-label="Permalink to &quot;工具结构&quot;">​</a></h1><h2 id="工具目录" tabindex="-1">工具目录 <a class="header-anchor" href="#工具目录" aria-label="Permalink to &quot;工具目录&quot;">​</a></h2><p>对于安装的分发版本，在安装目录下的<code>tool</code>文件夹就是其工具目录。 <img src="'+h+`" alt="安装目录下的工具目录「tool」" data-zoomable="true"></p><p>在GitHub仓库中的对应目录是仓库根目录下的<code>tool</code>文件夹。</p><h2 id="定义一个工具" tabindex="-1">定义一个工具 <a class="header-anchor" href="#定义一个工具" aria-label="Permalink to &quot;定义一个工具&quot;">​</a></h2><p>工具箱会扫描<code>tool</code>目录下的每一个子目录。如果一个子目录符合工具的定义结构，则认为其是一个合法的工具，并显示在工具页面中。</p><p>以下是合法的工具结构示例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tool-&gt;...</span></span>
<span class="line"><span>    -&gt;hashCalculator-&gt;...</span></span>
<span class="line"><span>                    -&gt;tool.json</span></span>
<span class="line"><span>                    -&gt;run.py</span></span>
<span class="line"><span>    -&gt;public-&gt;...</span></span></code></pre></div><p>工具最少需要提供<code>tool.json</code>和<code>run.py</code>两个文件，否则无法被工具箱正确加载。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-_8NMc" id="tab-B0VUJu7" checked><label data-title="tool.json" for="tab-B0VUJu7">tool.json</label><input type="radio" name="group-_8NMc" id="tab-UVsAg_x"><label data-title="run.py" for="tab-UVsAg_x">run.py</label></div><div class="blocks"><div class="language-json vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hash Calculator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hashCalculator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:/app/images/icons/IconHash.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;ver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MangoFanFan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Calculate Hash of anything.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;launchMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一般来说会在这里封装一些业务代码，然后在下面用魔法方法写调用接口（虽然严格上不能这么说，但也可以这么理解吧）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 __name__ 方法是为了提供由工具箱导入并运行的接口。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tool.hashCalculator.run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello FanTools!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此外，可以制作更多类似的接口，比如最传统的：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Goodbye FanTools!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></div></div><p><code>tool.json</code>中：</p><ul><li><code>name</code>和<code>tip</code>键的文本会在工具箱中显示；</li><li><code>icon</code>键对应的是在工具箱中显示的工具图标；</li><li><code>module</code>键必须与工具所在的文件夹一致；</li><li><code>launchMode</code>是工具的启动模式，此项正在制作，保持为<code>0</code>即可。</li><li><code>ver</code>必须是<code>x.x.x</code>格式的版本号，计划用于未来的工具管理，此项正在制作。</li><li><code>author</code>作者。</li></ul><h2 id="使用public代码" tabindex="-1">使用<code>public</code>代码 <a class="header-anchor" href="#使用public代码" aria-label="Permalink to &quot;使用\`public\`代码&quot;">​</a></h2><p>工具目录<code>tool</code>下还有一个<code>public</code>目录，这里存放的是公共代码，存放在此是为了与工具箱本体的代码做区分，并且方便工具导入。</p><p>使用<code>public</code>代码可以加速开发外表美观的工具，比如，使用<code>public_window.FanWindow</code>可以快速创建一个拥有空白窗口的空白工具。创建出的窗口与芒果工具箱本体窗口是风格一致、亮暗一致的。您可以从<code>PySide6</code>和<code>qfluentwidgets</code>中导入各种组件或对象来设计窗口。</p><p>或者也可以直接使用设计师+UIC来创建窗口，但是请参见下面的注意事项。</p><div class="warning custom-block"><p class="custom-block-title">⚠️注意！</p><p>PySide6原生的设计师和UIC工具设计的，使用Qt原生组件的窗口，需要在实例化时继承PySide6的原生窗口类，而不能继承<code>public</code>中提供的<code>FanWindow</code>。</p><p>这是因为当<code>FanWindow</code>切换亮暗主题时，原生的Qt组件并不能与之一同切换主题，从而导致在暗色下组件几乎完全不可见。</p><p>解决方案一：使用安装了QFluentWidgets插件的设计师（Fluent Client），参见<a href="https://qfluentwidgets.com/zh/pages/designer" target="_blank" rel="noreferrer">QFluentWidgets指南</a>。</p><p>解决方案二：在设计师中提升控件，但不能直接在设计师中预览设计效果，还是参见<a href="https://qfluentwidgets.com/zh/pages/designer" target="_blank" rel="noreferrer">上面的指南</a>。</p><p>解决方案三：手写UI，QFluentWidgets的控件的使用方式与Qt原生控件几乎一致，请参见<a href="https://qfluentwidgets.com/zh/pages/about" target="_blank" rel="noreferrer">QFluentWidgets文档</a>。</p><p>解决方案四：使用Qt原生组件+Qt原生窗口，这样创建的窗口不支持工具箱的亮暗主题切换，美观程度会下降，但能够使用原生的设计师和UIC工具。</p></div><p>另外，如果您使用Pycharm，可以参考我的这篇文章：<a href="https://ifanspace.top/2025/01/26/599.html" target="_blank" rel="noreferrer">为Pycharm添加PySide6外部工具的进阶教程</a>。</p>`,18)),a(t),a(e)])}const b=n(d,[["render",k]]);export{F as __pageData,b as default};
